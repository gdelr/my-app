{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["'use strict';\n\nimport EventEmitter from 'events';\nimport puppeteer from 'puppeteer';\nimport Joi from 'joi';\nimport plugApiMethods from './plug-api-methods';\nimport plugApiEvents from './plug-api-events';\n\nimport { IPuppeteerOptions, IConnectOptions, IWindow } from './index.types';\n\ndeclare const window: IWindow;\n\nclass PlugDjApi extends EventEmitter {\n  private readonly PLUG_URL: string = 'https://plug.dj';\n  private readonly PLUG_LOGIN_URL: string = 'https://plug.dj/_/auth/login';\n  private readonly PLUG_ROOM_URL: string = 'https://plug.dj/{roomId}';\n  private puppeteerOptions: IPuppeteerOptions;\n  private page: any;\n\n  public constructor(puppeteerOptions: IPuppeteerOptions = {}) {\n    super();\n    this.puppeteerOptions = Object.assign({ headless: true, ...puppeteerOptions });\n    this.mirrorPlugApiMethods();\n  }\n\n  /**\n   * Logs in to Plug and brings up specified room\n   */\n  public async connect(options: IConnectOptions) {\n    const optionsSchema = {\n      password: Joi.string()\n        .min(1)\n        .required(),\n      roomId: Joi.string()\n        .min(1)\n        .required(),\n      username: Joi.string()\n        .min(1)\n        .required(),\n    };\n\n    const validation = Joi.validate(options, optionsSchema);\n\n    if (validation.error) {\n      throw new Error(validation.error.details.map(i => i.message).join(''));\n    } else {\n      const browser = await puppeteer.launch(this.puppeteerOptions);\n      this.page = await browser.newPage();\n      try {\n        await this.login(options.username, options.password);\n        await this.visitRoom(options.roomId);\n      } catch (err) {\n        throw new Error('Could not login or visit room, check credentials and/or room name');\n      }\n    }\n  }\n\n  /**\n   * Logs in to Plug.dj\n   */\n  private async login(username: string, password: string) {\n    await this.page.goto(this.PLUG_URL, { waitUntil: 'load' });\n    await this.page.evaluate(\n      (loginUrl: string, username: string, password: string) => {\n        return new Promise((resolve, reject) => {\n          const interval = window.setInterval(() => {\n            if (window._csrf) {\n              const xhr = new XMLHttpRequest();\n              xhr.open('POST', loginUrl, true);\n              xhr.setRequestHeader('Content-Type', 'application/json; charset=UTF-8');\n              xhr.onload = () => {\n                if (xhr.readyState === xhr.DONE) {\n                  if (xhr.status === 200) {\n                    resolve(true);\n                  } else {\n                    reject(false);\n                  }\n                }\n              };\n              xhr.send(\n                JSON.stringify({\n                  csrf: window._csrf,\n                  email: username,\n                  password,\n                })\n              );\n              clearInterval(interval);\n            }\n          }, 500);\n        });\n      },\n      this.PLUG_LOGIN_URL,\n      username,\n      password\n    );\n  }\n\n  /**\n   * Navigate to the Plug.dj room\n   */\n  private async visitRoom(roomId: string) {\n    await this.page.goto(this.PLUG_ROOM_URL.replace('{roomId}', roomId), { waitUntil: 'load' });\n    await this.page.exposeFunction('__sendout', (eventType: string, data: any) =>\n      this.emit(eventType, data)\n    );\n    await this.page.evaluate((plugApiEventNames: string[]) => {\n      return new Promise((resolve, reject) => {\n        const interval = window.setInterval(() => {\n          if (typeof window.API !== 'undefined' && window.API.getUsers().length) {\n            clearInterval(interval);\n\n            // Register event handlers\n            for (const [key, value] of plugApiEventNames) {\n              window.API.on(value, data => window.__sendout(key, data));\n            }\n\n            resolve();\n          }\n        }, 500);\n      });\n    }, plugApiEvents);\n  }\n\n  /**\n   * Executes a Plug API method in the context of the Plug room\n   */\n  private async runPlugApiMethod(method: string, args: any) {\n    return await this.page.evaluate(\n      (method: string, args: any) => window.API[method].apply(this, args),\n      method,\n      args\n    );\n  }\n\n  /**\n   * Creates methods within this class to mirror the plug API ones\n   */\n  private mirrorPlugApiMethods() {\n    for (const method of plugApiMethods) {\n      if (!this.hasOwnProperty(method)) {\n        (this as any)[method] = (...args: any) => this.runPlugApiMethod(method, args);\n      }\n    }\n  }\n}\n\n/* tslint:disable:no-string-literal */\nmodule.exports = exports['defaults'] = PlugDjApi\n"]}